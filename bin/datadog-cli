#!/usr/bin/env node
const {EOL} = require('os');
const _ = require('lodash/fp');
const json = require('json-bigint');
const minimist = require('minimist');
const rc = require('rc');
const {version} = require('../package');
const dogapi = require('../src');

const config = rc('dogapi', {api_key: null, app_key: null});
dogapi.initialize(config);

const hasKey = (key, functionName) =>
  _.has([key, functionName], dogapi) && _.isFunction(_.get([key, functionName], dogapi));

const usage = [
  'Usage:',
  '  dogapi --help',
  '  dogapi <command> --help',
  '  dogapi --version',
  '  dogapi now',
  '  dogapi past <seconds-ago>',
  '  dogapi future <seconds-ahead>'
];
const help = [];
_.keys(dogapi).forEach(key => {
  if (!hasKey(key, 'getUsage') || hasKey(key, 'handleCli')) return;
  usage.push(...dogapi[key].getUsage());
  if (hasKey(key, 'getHelp')) help.push('', ...dogapi[key].getHelp());
});

usage.push(...help);

const main = args => {
  const command = args._[2] === 'servicecheck' ? 'serviceCheck' : args._[2];
  const subcommand = args._[3];

  if (command === 'now') return console.log(dogapi.now());
  if (command === 'past' && args._.length > 3)
    return console.log(dogapi.now() - parseInt(args._[args._.length - 1]));
  if (command === 'future' && args._.length > 3)
    return console.log(dogapi.now() + parseInt(args._[args._.length - 1]));

  if (_.has(command, dogapi)) {
    if (subcommand) {
      dogapi[command].handleCli(subcommand, args, function(err, res) {
        if (err) {
          console.error(json.stringify(err, null, '  '));
          process.exit(1);
        }
        return console.log(json.stringify(res || 'success', null, '  '));
      });
    }

    let commandUsage = ['Usage:'].concat(dogapi[command].getUsage());
    if (hasKey(command, 'getHelp')) {
      commandUsage = commandUsage.concat([EOL], dogapi[command].getHelp());
    }
    return console.log(commandUsage.join(EOL).replace(/\$\{command\}/g, '  dogapi'));
  }
  if (args.version) return console.log(version);

  console.log(usage.join(EOL));
};

if (!module.parent) {
  const args = minimist(process.argv);
  main(args);
}
